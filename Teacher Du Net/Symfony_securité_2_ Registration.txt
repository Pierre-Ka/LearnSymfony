Pour creer un formulaire d'enregistrement Register : 
s make:registration-form
		uniqueEntity : yes
		sendEmail for verifying user : yes
		verifier les adresses anonymes : ???
		adresse email utilisé pour envoyer les mails de confirmation : noreply@panterest.com
		nom associé a l'adresse mail : panterest
		utilisateur connecté automatiquement après inscription : yes
On nous donne un ensemble d'étapes à suivre. Puis on nous indique la marche à suivre : 
 1) Install some missing packages:
      composer require symfonycasts/verify-email-bundle
 2) In RegistrationController::verifyUserEmail():
    * Customize the last redirectToRoute() after a successful email verification.
    * Make sure you're rendering success flash messages or change the $this->addFlash() line.
 3) Review and customize the form, controller, and templates as needed.        
 4) Run "php bin/console make:migration" to generate a migration for the newly 
added User::isVerified property.

Donc on installe : composer require symfonycasts/verify-email-bundle
On voit que 3 classes sont apparues : Controller/RegistrationController.php, Form/RegistrationFormType.php, Security/EmailVerifier.php. Dans User , une contrainte d'unicité et une nouvelle propriété isVerified ( + ses setters et getters) sont apparus. Il faudra donc faire une migration. 2 templates sont apparus dans le dossier registration/ confirmation_email.html.twig et register.html.twig

On va dans .env et on repère : ###< symfony/mailer ###
On copie et colle MAILER_DSN=smtp://localhost dans .env.local
On fait notre migration : make:migrations, dotrine:migrations:migrate

Là si on se rend sur la page Registrer et que l'on rempli le formulaire, on a une erreur : en effet 
en bdd on a des champs obligatoires ( noms, prenoms, ect ... ).
Il faut donc donner la possibilité de rentrer ces informations, on va modifier le RegistrationFormType.


*************************** MAIL ***************************************************
En plus du nouveau formulaire et du nouveau controlleur, on a eu une nouvelle classe crée nommée EmailVerifier dans src/Security/, elle possède 2 fonctions : sendEmailConfirmation et handleEmailConfirmation


Src ----> Controller ----> RegistrationController : register()
												--> verifyUserEmail()
	 ---> Security ------> EmailVerifier : 	sendEmailConfirmation()														 -->   handleEmailConfirmation()

Ensuite lorsqu'on s'enregistre, il n'y a pas de mail envoyé. En effet il faut faire un peu de configuration.
 Voici le code dans le controller : 
             // generate a signed url and email it to the user
            $this->emailVerifier->sendEmailConfirmation('app_verify_email', $user,
                (new TemplatedEmail())
                    ->from(new Address('noreply@panterest.com', 'panterest'))
                    ->to($user->getEmail())
                    ->subject('Please Confirm your Email')
                    ->htmlTemplate('registration/confirmation_email.html.twig')
            );
            // do anything else you need here, like send an email

            return $userAuthenticator->authenticateUser(
                $user,
                $authenticator,
                $request
            );
        }
**********
On s'inscrit sur https://mailtrap.io/inboxes
ikanhiumalam@gmail.com
MakanMakan
Lorsqu'on clique sur notre application : 
https://mailtrap.io/inboxes/1662658/messages
On a l'integration qui apparait ( on pourrait choisir Symfony 5+ et copier ) : 
Dans env.local. on change MAILER_DSN=smtp://localhost ( qui s'utilise si on a un serveur SMTP en local ce qui n'est pas notre cas ) par 
MAILER_DSN=smtp://username:password@urlhote:port

==> Et la ca marche pas ..............

L'envoi de mail sur Symfony est gerer par Mailer.
Si on va dans register() dans RegistrationController on a le code :
    
    // generate a signed url and email it to the user
    $this->emailVerifier->sendEmailConfirmation('app_verify_email', $user,
        (new TemplatedEmail())
            ->from(new Address('noreply@panterest.com', 'panterest'))
            ->to($user->getEmail())
            ->subject('Please Confirm your Email')
            ->htmlTemplate('emails/registration/confirmation.html.twig')
    );
    // do anything else you need here, like send an email

    return $userAuthenticator->authenticateUser(
        $user,
        $authenticator,
        $request
    );
On appelle donc la fonction sendEmailConfirmation et on lui passe 3 arguments : la route appelée, l'utilisateur et le template de l'email. Cette fonction fait : 
        $signatureComponents = $this->verifyEmailHelper->generateSignature(
            $verifyEmailRouteName,
            $user->getId(),
            $user->getEmail()
        );
        $context = $email->getContext();
        $context['signedUrl'] = $signatureComponents->getSignedUrl();
        $context['expiresAtMessageKey'] = $signatureComponents->getExpirationMessageKey();
        $context['expiresAtMessageData'] = $signatureComponents->getExpirationMessageData();
        $email->context($context);
        $this->mailer->send($email);
Les variables passées : signedUrl, expiresAtMessageKey, expiresAtMessageData se retrouvent au niveau du template. Ces contenus ont été générés via verifyEmailHelper (implementer par l'interface VerifyEmailHelperInterface qui définit 2 fonctions generateSignature validateEmailConfirmation ).
On a un objet de type VerifyEmailSignatureComponents possedant 2 propriétés :
'signedUrl' permet d'avoir un url signé et 'expiresAt' permet d'avoir un timestamp d'expiration. A quoi cela va servir ?
Cela génère le lien sécurisé et difficilemment hackable à cliquer pour confirmer l'email :
ex : 
https://127.0.0.1:8000/verify/email?expires=4584651564961656&signature=461fgbrynentIFCYFGHve6&6545&fgbrn!6
6HVVIfggV2Gv22u3kHbUY!KGubj&token=461fgbrynentIFCYFGHve6&6545&fgbrn!6zrgryjefzg6efF1e535et48

On crée le $context de l'email, puis on va lui setter ces 2 variables ( 'signedUrl' et 'expiredAt' ). Puis on fois setter on va définir ce contexte comme contexte de l'email ( $email->context($context); ) puis on envoie le mail et on retourne :
    return $userAuthenticator->authenticateUser(
        $user,
        $authenticator,
        $request
    );
La methode authenticateUser() va gérer le token de confirmation

Lorsque l'utilisateur se rend sur son adresse mail et clique sur le lien cela va appeler la fonction verifyUserEmail() du RegistrationController ( route 'app_verify_email') : 
 
    $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');

    try {
        $this->emailVerifier->handleEmailConfirmation($request, $this->getUser());
    } catch (VerifyEmailExceptionInterface $exception) {
        $this->addFlash('verify_email_error', $translator->trans($exception->getReason(), [], 'VerifyEmailBundle'));

        return $this->redirectToRoute('app_register');
    }
    $this->addFlash('success', 'Your email address has been verified.');
    return $this->redirectToRoute('app_register');

Cette fonction se contente de vérifier si l'utilisateur est connecté et si c'est bien le cas elle appelle emailVerifier->handleEmailConfirmation() et si il n'y a pas d'erreur alors elle redirige. Voyons handleEmailConfirmation(): 

    $this->verifyEmailHelper->validateEmailConfirmation($request->getUri(), $user->getId(), $user->getEmail());
    $user->setIsVerified(true);
    $this->entityManager->persist($user);
    $this->entityManager->flush();

Si la confirmation est correcte, elle sette le isVerified a true.

Une verification importante est de recuperer le lien envoyé et le copier dans l'url en modifiant le token ( ou la signature ) pour voir si cela marche ou pas.


*************************** REINITIALISER LE PASSWORD *********************

On va faire :
s make:reset-password
Erreur : il faut installer : 
composer require symfonycasts/reset-password-bundle puis s make:reset-password
        Vers quelle route rediriger ? : y
        adresse email utilisé pour envoyer les mails : noreply@panterest.com
        nom associé a l'adresse mail : panterest

Une nouvelle entité App\Entity\ResetPasswordRequest a été crée, il faut donc faire une migration.
Il y a egalement son repository evidemment.
Un nouveau controlleur App\Controller\ResetPasswordController a été crée.
Deux formulaires on été crée : App\Form\ChangePasswordFormType et App\Form\ResetPasswordRequestFormType
Dans templates/rest_password/ on a 4 nouveaux templates : check_email.html.twig, email.html.twig, request.html.twig, reset.html.twig

Donc en premier on a un formulaire (ResetPasswordRequestFormType => request.html.twig ) dans lequel on doit entrer notre adresse email puis on envoie un email securisé  ( email.html.twig ) et on a une notification sur le site nous invitant à consulter les emails ( check_email.html.twig ), enfin le lien de l'email ramène vers une page ou figure notre second formulaire (ChangePasswordFormType => reset.html.twig)

A niveau du navigateur, tout commence par la route 'reset_password', lorsqu'on clique sur le lien :
Forget password ?. A niveau du controller toutes les routes sont précédées de 'reset_password' qui est defini de manière global ( cad avant la classe Controller )
Dans ce controller ResetPasswordController, la methode request() simplement fourni un formulaire avec un champ Email et gère les données soumises cad l'email communiqué et lui envoie le mail (traduit au besoin ) :   if ($form->isSubmitted() && $form->isValid()) {
                return $this->processSendingPasswordResetEmail(
                    $form->get('email')->getData(),
                    $mailer,
                    $translator
                );
 $mailer est un objet MailerInterface, la même utilisée pour envoyé le mail de confirmaion d'inscription. La methode processSendingPasswordResetEmail() est une methode privée du controlleur :
 
 private function processSendingPasswordResetEmail(string $emailFormData, MailerInterface $mailer, TranslatorInterface $translator): RedirectResponse
    {
        $user = $this->entityManager->getRepository(User::class)->findOneBy([
            'email' => $emailFormData,
        ]);
        // Do not reveal whether a user account was found or not.
        if (!$user) {   return $this->redirectToRoute('app_check_email');   }
        try 
        {
            $resetToken = $this->resetPasswordHelper->generateResetToken($user);
        } 
        catch (ResetPasswordExceptionInterface $e) 
        {
            return $this->redirectToRoute('app_check_email');
        }
        $email = (new TemplatedEmail())
            ->from(new Address(
                $this->getParameter('app.mail_from_adress'),
                $this->getParameter('app.mail_from_name')
                ))
            ->to($user->getEmail())
            ->subject('Your password reset request')
            ->htmlTemplate('reset_password/email.html.twig')
            ->context([
                'resetToken' => $resetToken,
            ]) ;
        $mailer->send($email);
        // Store the token object in session for retrieval in check-email route.
        $this->setTokenObjectInSession($resetToken);
        return $this->redirectToRoute('app_check_email');
    }     
On recupère l'utilisateur puis on génère un token ( que l'on appelle $resetToken ) et on le sette au contexte du mail qui l'on envoie puis $mailer->send($email);. On remarque que si tout se passe bien ou si il y a des problèmes on renvoie quoi qu'il arrive sur la même route ('app_check_email') ainsi on ne donne pas d'indice quand à la présence de l'adresse email dans notre bdd ou non. 
Cette page peut être donc appelé dans un contexte ou tout s'est bien passé mais egalement si il y a un problème. La route 'app_check_email' va verifier la presence du bon token en générant en cas d'absence un faux token : 
    #[Route('/check-email', name: 'app_check_email')]
    public function checkEmail(): Response
    {
        // Generate a fake token if the user does not exist or someone hit this page directly.
        // This prevents exposing whether or not a user was found with the given email address or not
        if (null === ($resetToken = $this->getTokenObjectFromSession())) {
            $resetToken = $this->resetPasswordHelper->generateFakeResetToken();
        }

        return $this->render('reset_password/check_email.html.twig', [
            'resetToken' => $resetToken,
        ]);
    }
Donc si le compte existe un vrai token est générée et si il n'existe pas un faux token est généré ( appelé egalement $resetToken ) ainsi on ne peut pas en conclure qu'en a la présence ou l'absence de l'adresse en bdd grâce à l'observation de la présence ou de l'absence du token.

En fait lorqu'on rentre notre adresse mail et que l'on clique sur OK. Si le programme trouve un utilisateur en bdd (  $user = $this->entityManager->getRepository(User::class)->findOneBy(['email' => $emailFormData ]); ) alors il génère un token enregistré en bdd dans la table 'reset_password_request'. Cette table comporte plusieurs colonnes : id/user_id/selector/hashed_token/request_at/expires_at

Lorsque l'utisateur se rend sur son email et clique sur le lien de type : 
<a href="{{ url('app_reset_password', {token: resetToken.token}) }}"> cad
https://127.0.0.1:8000/reset-password/reset/kjH5nJj6N5Nn...{token} cela va matcher la route reset():

    #[Route('/reset/{token}', name: 'app_reset_password')]
    public function reset(Request $request, UserPasswordHasherInterface $userPasswordHasher, TranslatorInterface $translator, string $token = null): Response
    {
        if ($token) {
            // We store the token in session and remove it from the URL, to avoid the URL being
            // loaded in a browser and potentially leaking the token to 3rd party JavaScript.
            $this->storeTokenInSession($token);
            return $this->redirectToRoute('app_reset_password');
        }
        $token = $this->getTokenFromSession();
        if (null === $token) { error }
        try 
        {
            $user = $this->resetPasswordHelper->validateTokenAndFetchUser($token);
        } 
        catch (ResetPasswordExceptionInterface $e)  { error }
        // The token is valid; allow the user to change their password.
        $form = $this->createForm(ChangePasswordFormType::class);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $this->resetPasswordHelper->removeResetRequest($token);
            $encodedPassword = $userPasswordHasher->hashPassword(
                $user,
                $form->get('plainPassword')->getData()
            );
            $user->setPassword($encodedPassword);
            $this->entityManager->flush();
            $this->cleanSessionAfterReset();
            return $this->redirectToRoute('app_home');
        }

        return $this->render('reset_password/reset.html.twig', [
            'resetForm' => $form->createView(),
        ]);
    }

Si le lien comporte un token alors on le stocke en session et on redirige l'utilisateur sur la même page. (sans token cette fois ). Ensuite on extrait le token de la session, on verifie le token est valide. Si cela est bon on affiche le formulaire pour changer de password :
$form = $this->createForm(ChangePasswordFormType::class);
Et on gère egalement le cas ou les données ont été rentrées alors il faut setter le nouveau password et ne pas oublier de le hasher ; session et token ( en bdd egalement) sont alors détruits et on reoriente l'utilisateur sur la page d'accueil.

Si on va voir le formulaire on a qu'un seul champ de type RepeatedType : donc il va créer 2 entrées qui ne représente qu'une seule valeur et une seule validation. Par défault ce type n'est pas Password, donc il faut rajouter 'type'=> PasswordType::class et les contraintes liées.
